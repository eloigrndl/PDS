import math as mt


######################################################
#   RANDOM CIRCUIT FILE
######################################################
# This is a list of point representing a circuit
# It is more clever to have in a separated file since the list of point is quite long

CIRCUIT = [
    (7.7250788710756,-5.8506086574495),
    (9.3683618428502,-5.8506086574495),
    (10.8942674594981,-5.8506086574495),
    (13.0070598517797,-5.8506086574495),
    (15.1785409216247,-5.7919199798861),
    (17.4673993465965,-5.7332313023227),
    (19.5215030613147,-5.7332313023227),
    (21.6342954535964,-5.6158539471959),
    (23.277578425371,-5.7332313023227),
    (24.5687293317653,-5.7332313023227),
    (26.3293896586666,-5.7332313023227), 
    (28.442182050948272,-5.733231302322704), 
    (30.1441537002862,-5.7919199798861), 
    (31.493993284244,-5.3224105593791), 
    (32.902521545765,-4.0899483305481), 
    (33.2546536111453,-2.0945332933933), 
    (33.4307196438355,0.8399005847756), 
    (33.489408321398834,2.6005609116769914), 
    (33.54809699896221,4.185155205888201), 
    (33.489408321398834,5.711060822536033), 
    (33.66547435408897,7.5890985045641335), 
    (33.54809699896221,9.643202219282367), 
    (33.19596493358194,11.46255122374709), 
    (33.37203096627208,13.575343616028704), 
    (32.66776683551153,15.336003942930047), 
    (30.672351798356658,15.86420204100045), 
    (29.146446181708814,15.512069975620182), 
    (28.442182050948272,14.63173981216951), 
    (27.62054056506097,13.281900228211812), 
    (26.270700981103264,11.755994611563981), 
    (25.6251255279061,10.640909737859797), 
    (25,10), 
    (23.92315387856812,8.645494700704939),
    (22.925446359990683,7.530409827000755), 
    (21.75167280872311,6.591390985986704), 
    (20.636587935018916,5.593683467409276), 
    (19.52150306131472,4.361221238578335), 
    (18.641172897864045,3.0700703321840166), 
    (17.291333313906335,1.602853393099563), 
    (16.058871085075385,0.2530138091418659), 
    (14.591654145990917,-0.8620710645623187), 
    (12.713616463962802,-1.3315804850693438), 
    (10.835578781934688,-1.1555144523792094), 
    (9.368361842850222,-0.2164956113651592), 
    (8.781475067216435,0.8399005847756472), 
    (8.19458829158265,2.365806201423479),
    (7.842456226202378,4.478598593705092),
    (7.3142581281319705,6.708768341113461),
    (7.431635483258728,8.58680602314156),
    (8.488031679399542,10.347466350042906),
    (10.131314651174144,10.640909737859797), 
    (11.246399524878337,9.701890896845747),
    (13.065748529343074,8.410739990451427), 
    (14.591654145990917,7.119589084057108), 
    (15.354606954314841,6.532702308423326), 
    (16.000182407512007,5.887126855226167),
    (17.115267281216198,4.889419336648738), 
    (17.995597444666878,4.126466528324823), 
    (20.51921057989216,1.3094100052826723), 
    (21.986427518976626,0.5464571969587566), 
    (23.277578425370955,-0.27518428892853736), 
    (25.038238752272314,-0.9207597421256969), 
    (26.74021040161029,-1.390269162632722), 
    (28.618248083638406,-0.3338729664919155), 
    (29.498578247089085,1.6615420706629411), 
    (30.08546502272287,4.009089173198067), 
    (30,5), 
    (27.913983952877864,6.708768341113461), 
    (26.38807833623002,7.530409827000755), 
    (25.272993462525825,8.234673957761293), 
    (23.277578425370955,9.349758831465477), 
    (21.63429545359635,10.171400317352772), 
    (20.636587935018916,10.81697577054993), 
    (19.110682318371072,11.46255122374709), 
    (17.760842734413366,12.04943799938087), 
    (16.82182389339931,12.636324775014653),
    (15.589361664568356,13.105834195521679), 
    (14.180833403047268,13.575343616028704), 
    (12.654927786399425,13.98616435897235), 
    (11.305088202441716,14.573051134606132), 
    (10,15), 
    (8.781475067216435,14.749117167296266), 
    (7.607701515948864,14.338296424352619), 
    (6.668682674934805,13.69272097115546), 
    (6.2578619319911555,12.871079485268165), 
    (6.08179589930102,11.990749321817493), 
    (5.788352511484127,10.875664448113309), 
    (5.670975156357369,9.525824864155611), 
    (5.4949091236672,8.2933626353247), 
    (5.436220446103855,7.413032471873999), 
    (5.260154413413719,5.887126855226167), 
    (5,5), 
    (3.5581827640757395,4.2438438834515795), 
    (2.26703185768141,3.715645785381176), 
    (1.093258306413838,3.187447687310773), 
    (0,2.483183556550235), 
    (-0.4913359877973846,0.6638345520855129), 
    (-0.1392039224171129,-0.6860050318721843), 
    (0.44768285321667317,-1.5663351953228564), 
    (1.6214564044842454,-2.1532219709566376), 
    (2.6778526006250605,-3.092240811970688), 
    (3.8516261518926327,-4.031259652984738), 
    (5,-5), 
    (6.316550609554534,-5.381099236942435)
]

def smooth_path(points):
    new_points = list()
    new_points.append(points[0])
    for i in range(len(points) - 1):
        start = points[i]
        end = points[i + 1]
        length = (end[0] - start[0]) ** 2 + (end[1] - start[1]) **2
        if length > 1 :
            new_point = ((end[0] + start[0])/2, (end[1] + start[1])/2)
            new_points.append(new_point)
        new_points.append(end)

    return new_points